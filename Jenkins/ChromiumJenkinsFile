// Describes a new stage, stages are executed in the order in which they are declared
timeout(90) {
  stage("build_fetch_if_needed") {
    node("azwincr") {
      git "https://github.com/dlibby-/hello-world"
      bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass .\\InstallDependencies.ps1"
    }
  }
}

stage("build_sync") {
   // Providing a string argument to node() causes the steps inside to be executed on
   // machines of a given label. This is currently configured to be a VisualStudio2017
   // VM allocated on Azure
   node("azwincr") {
      dir("d:/EdgeCI/src/src") {
        bat 'gclient sync'
      }
   }
}

stage("build_gen") {
   // Providing a string argument to node() causes the steps inside to be executed on
   // machines of a given label. This is currently configured to be a VisualStudio2017
   // VM allocated on Azure
   node("azwincr") {
      dir("d:/EdgeCI/src/src") {
        pwd()
        bat 'gn gen out/default'
      }
   }
}

// Describes a new stage, stages are executed in the order in which they are declared
// so this currently executes as the fourth stage
stage("build_ninja") {
   // Providing a string argument to node() causes the steps inside to be executed on
   // machines of a given label. This is currently configured to be a VisualStudio2017
   // VM allocated on Azure
   node("azwincr") {
      dir("d:/EdgeCI/src/src/out/default") {
        pwd()
        bat 'ninja url_unittests'
        stash include:'./*.exe', name:'tests'
      }
   }
}


// This stage doesn't run until after the build stage above
stage("vmagent_test") {
  // This stage runs on a different label - test VMs
  node("azwintest") {
    // unpack the stashed results ('tests') and run them
    unstash name:'tests'
    bat 'url_unittests.exe'    
  }
}
